<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!--
sql映射文件，写sql语句的，mybatis会执行这些sql
1、指定约束文件
    <!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
        mybatis-3-mapper.dtd是约束文件的名称，扩展名是dtd的
2、约束文件作用：限制，检查在当前文件中出现的标签、属性必须符合mybatis的要求

3、mapper是当前文件的根标签，必须的。
namespace：叫做命名控件，是一个唯一值，可以是自定义的字符串
            可以自定义，但是要求使用dao接口的全限定名称。
4、在当前文件中，可以使用特定的标签，表示数据库的特定操作。
<select>:表示执行查询，select语句
<update>表示更新数据库的操作，就是在update镖旗那种，写的是update sql语句
<insert> 表示插入，放的是insert语句
<delete>表示删除，执行的是delete语句
-->

<mapper namespace="com.ydd.dao.StudentDao">

<!--    select表示查询操作。
id是要执行的sql语法的唯一标识，mybatis会使用这个id的值来找到要执行的sql语句
可以自定义，但是要求你使用接口中的方法名称。
resultTpye:表示结果类型，是SQL语句执行后得到的ResultSet遍历后得到的java对象的类型
值写的是类型的全限定名称
-->
<!--    #{id}表示获取这个对象的id的属性值-->
    <select id="selectStudentById" parameterType="java.lang.Integer" resultType="com.ydd.domain.Student">
        select id,name,email,age from student where id=#{id}
    </select>

    <select id="selectMultiParam" resultType="com.ydd.domain.Student">
        select id,name,email,age from student where name=#{myname} or age=#{myage}
    </select>

<!--    多个参数，使用java对象的属性值，作为参数实际值
语法格式：
     完整语法：#{属性名，javaType=类型名称，jdbcType=数据类型}
            javaType：java中的属性的数据类型
            jdbcType：在数据库中的对应类型
     简化方式：#{属性名}，javaType，jdbcType的值mybatis反射能够获取，不用提供

-->
    <select id="selectMultiByObject" resultType="com.ydd.domain.Student">
        select id,name,email,age from student where name=#{paramName} or age=#{paramAge}
    </select>
</mapper>