<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
<!--    声明，注册springmvc的核心对象DispatcherServlet-->
<!-- 我们需要在tomcat服务器启动后，创建dispatcherServlet对象
因为dispatcherServlet在他的创建过程中
会同时创建springmvc容器对象读取springmvc配置文件，
把这个配置文件中的对象都创建好，当用户发起请求的时候就可以直接使用对象了
servlet初始化会执行init（）方法，dispatcherservlet在init（）方法中{
//创建容器，读取配置文件
WebApplicationContext ctx=new ClassPathXmlApplicationContext("springmvc.xml");
//把容器对象放入到servletContext中
getServletContext.setAttribute("key","value");


}

-->
    <servlet>
        <servlet-name>myweb</servlet-name>
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

        <init-param>
            <param-name>contextConfigLocation</param-name>
            <param-value>classpath:springmvc.xml</param-value>
        </init-param>
        <!--    我们希望在tomcat启动后创建servlet对象的顺序。他的值是整数，数值越小，tomcat创建对象的时间越早。大于等于0的整数-->
        <load-on-startup>1</load-on-startup>
    </servlet>
    <servlet-mapping>
        <servlet-name>myweb</servlet-name>
<!--      使用框架的时候，url-pattern可以使用两种值
  1，使用扩展名方式，语法，*.xxx   ,xxx是自定义的扩展名，常用的方式*.do，*.action，*.mvc-->
        <url-pattern>*.do</url-pattern>
    </servlet-mapping>

</web-app>