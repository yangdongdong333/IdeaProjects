<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns="http://xmlns.jcp.org/xml/ns/javaee"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd"
         version="4.0">
  <!--    声明，注册springmvc的核心对象DispatcherServlet-->
  <!-- 我们需要在tomcat服务器启动后，创建dispatcherServlet对象
  因为dispatcherServlet在他的创建过程中
  会同时创建springmvc容器对象读取springmvc配置文件，
  把这个配置文件中的对象都创建好，当用户发起请求的时候就可以直接使用对象了
  servlet初始化会执行init（）方法，dispatcherservlet在init（）方法中{
  //创建容器，读取配置文件
  WebApplicationContext ctx=new ClassPathXmlApplicationContext("springmvc.xml");
  //把容器对象放入到servletContext中
  getServletContext.setAttribute("key","value");


  }

  -->
<!--  注册中央调度器-->
  <servlet>
    <servlet-name>myweb</servlet-name>
    <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>

    <init-param>
      <param-name>contextConfigLocation</param-name>
      <param-value>classpath:conf/DispatcherServlet.xml</param-value>
    </init-param>
    <!--    我们希望在tomcat启动后创建servlet对象的顺序。他的值是整数，数值越小，tomcat创建对象的时间越早。大于等于0的整数-->
    <load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
    <servlet-name>myweb</servlet-name>
    <!--      使用框架的时候，url-pattern可以使用两种值
      1，使用扩展名方式，语法，*.xxx   ,xxx是自定义的扩展名，常用的方式*.do，*.action，*.mvc-->
    <url-pattern>*.do</url-pattern>
  </servlet-mapping>

<!--  注册监听器-->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:conf/applicationContext.xml</param-value>
  </context-param>
  <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>

  <!--注册字符集过滤器，解决post请求乱码的问题-->
  <filter>
    <!--        自定义名字-->
    <filter-name>characterEncodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>utf-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceRequestEcoding</param-name>
      <param-value>true</param-value>
    </init-param>
    <!--        强制请求对象（HtppservletRequest）使用encoding编码的值-->
    <init-param>
      <param-name>forceResponseEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>characterEncodingFilter</filter-name>
    <!--        /*  表示强制所有的请求先通过过滤器处理-->
    <url-pattern>/*</url-pattern>
  </filter-mapping>
</web-app>